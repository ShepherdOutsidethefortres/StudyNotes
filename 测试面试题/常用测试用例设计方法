常用测试用例设计方法
等价划分法
一、 定义
在测试中，我们不可能将每一个输入数据一一测试，这样效率很低，费时费力。实际测试中我们需要选择其中的一部分数据进行测试。等价划分法是把所有可能的输入数据,也就是程序的输入域划分成若干个子集,然后从每一个子集中选取少数典型的具有代表性的数据作为测试用例。该方法是一种重要的,常用的黑盒测试用例设计方法。

二、 等价类
等价类：等价类是某个输入域的子集合，并且在这个子集合中，每一个输入数据对于揭露程序中的错误都是等效的。
因此，测试等价类中的一个代表数据，就相当于对等价类中的其他值进行了测试。如果我们把全部的输入数据都合理的划分成若干的等价类，再对这些等价类中的代表数据进行测试，就相当于对全体输入数据进行了测试。这样的测试可以用少量的测试数据获得较好的测试结果。
等价类的划分有两种情况：有效等价类和无效等价类。
有效等价类是指对程序来说有意义的，合理的数据所构成的集合。
无效等价类是指对程序来说没有意义的，不合理的数据所构成的集合。
对程序的有效等价类进行测试，可以检验程序是否实现了规格中说明的功能和性能。而为了保证软件的可靠性，我们不仅要对有效等价类中的数据进行测试，还要对无效等价类中的数据进行测试。这样的软件能接受正确有效的数据，也可以经受住意外的考验不至于崩溃。

三、 等价类的划分
等价类的划分标准：
1.	子集互不相交（无冗余性）
2.	子集的并是整个集合（完备性）
3.	一个等价类中选择一个测试用例
划分等价类的方法：
1.在输入条件规定了取值范围或值的个数的情况下,则可以确立一个有效等价类和两个无效等价类。如：输入值是学生成绩，范围是0～100，-∞～0和100～∞位两个无效类，范围在0～100间为有效类；
2.在输入条件规定了输入值的集合或者规定了"必须如何"的条件的情况下,可确立一个有效等价类和一个无效等价类，满足条件的情况为有效等价类，不满足条件为无效等价类。
3.在输入条件是一个布尔量（T or F）的情况下,可确定一个有效等价类和一个无效等价类，T为有效类，F为无效类。
4.在规定了输入数据的一组值（假定有n个）,并且程序要对每一个输入值分别处理的情况下,可确立n个有效等价类和一个无效等价类。如：输入条件说明学历可为:专科、本科、硕士、博士四种之一，则分别取这四种这四个值作为四个有效等价类，另外把四种学历之外的任何学历作为无效等价类。
5.在规定了输入数据必须遵守的规则的情况下,可确立一个有效等价类（符合规则）和若干个无效等价类（可以从不同的角度违反规则）；
6.在确知已划分的等价类中各元素在程序处理中的方式不同的情况下,则应再将该等价类进一步的划分为更小的等价类。

四、设计测试用例
  在确立了等价类后,可建立等价类表,列出所有划分出的等价类输入条件：有效等价类、无效等价类，然后从划分出的等价类中按以下三个原则设计测试用例：
  1)为每一个等价类规定一个唯一的编号；
  2)设计一个新的测试用例,使其尽可能多地覆盖尚未被覆盖地有效等价类,重复这一步，直到所有的有效等价类都被覆盖为止；
  3)设计一个新的测试用例,使其仅覆盖一个尚未被覆盖的无效等价类,重复这一步，直到所有的无效等价类都被覆盖为止。

五、 实例
某程序规定："输入三个整数 a 、 b 、 c 分别作为三边的边长构成三角形。通过程序判定所构成的三角形的类型，当此三角形为一般三角形、等腰三角形及等边三角形时，分别作计算 … "。用等价类划分方法为该程序进行测试用例设计。

输入条件：（1）整数 （2）三个数 （3）非零数 （4）正数 （5）两边之和大于第三遍 （6）有两边相等 （7）三条边都相等

如果三条边只满足（1）（2）（3）（4）时有输出，输出“非三角形”
如果同时满足（1）～（5），输出“一般三角形”。
如果同时满足（1）～（6），输出“等腰三角形”。
如果同时满足（1）～（7），输出“等边三角形”。


输入条件	输入三个整数	有效等价类型	    号码	无效等价类	        号码
		            整数	        1	    a为非整数	        12
				                            b为非整数	        13
				                            c为非整数	        14
				                            a,b为非整数	        15
				                            a,c为非整数	        16
				                            b,c为非整数	        17
				                            a,b,c都为非整数	    18
		            三个数	        2	    只给a	            19
		            		                只给b	            20
		            		                只给c	            21
		            		                只给a,b	            22
		            		                只给a,c	            23
		            		                只给b,c	            24
		            		                给三个以上的数	    25
		            非零数	        3	    a为0	            26
		            		                b为0	            27
		            		                c为0	            28
		            		                a,b为0	            29
		            		                a,c为0	            30
		            		                b,c为0	            31
		            		                a,b,c皆为0	        32
		            正数	        4	    a＜0	            33
		            		                b＜0	            34
		            		                c＜0	            35
		            		                a＜0 且b＜0	        36
		            		                a＜0 且c＜0	        37
		            		                b＜0 且c＜0	        38
		            		                a＜0 且b＜0 且c＜0	39
输出条件	一般三角形	a+b＜c	        5	    a+b＞c	            40
				                            a+b=c	            41
		            a+c＜b	        6	    a+c＞b	            42
				                            a+c=b	            43
		            b+c＜a	        7	    b+c＞a	            44
				                            b+c=a	            45
	    等腰三角形	a=b	            8
		            b=c	            9
		            a=c	            10
	    等边三角形	a=b=c	        11


边界值分析法
一、 定义
边界值分析法就是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。

二、 与等价划分的区别
（1）边界值分析不是从某等价类中随便挑一个作为代表，而是使这个等价类的每个边界都要作为测试条件。
（2）边界值分析不仅考虑输入条件，还要考虑输出空间产生的测试情况。

三、边界值分析方法的思考
长期的测试工作经验告诉我们，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部。因此针对各种边界情况设计测试用例，可以查出更多的错误。边界值分析方法主要是为了考虑极端情况。
使用边界值分析方法设计测试用例，首先应确定边界情况。通常输入和输出等价类的边界，就是应着重测试的边界情况。应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。

四、常见的边界值
  （1）对16-bit 的整数而言 32767 和 -32768 是边界
  （2）屏幕上光标在最左上、最右下位置
  （3）报表的第一行和最后一行，第一列，最后一列。
  （4）数组元素的第一个和最后一个
  （5）循环的第 0 次、第 1 次和倒数第2 次、最后一次。

通常情况下，软件测试所包含的边界检验有几种类型：数字、字符、位置、重量、大小、速度、方位、尺寸、空间等。相应地，以上类型的边界值应该在：最大/最小、首位/末位、上/下、最快/最慢、最高/最低、  最短/最长、 空/满等情况下。

五、  实例
三角形问题的边界值分析测试用例。要求输入三个非零的正整数。假设三角形的边长取值范围是[1,100]。



测试用例	a	b	c	预期输出
1	1	100	100	等腰三角形
2	2	100	100	等腰三角形
3	100	1	100	等腰三角形
4	100	2	100	等腰三角形
5	100	100	1	等腰三角形
6	100	100	2	等腰三角形
7	1	99	99	等腰三角形
8	2	99	99	等腰三角形
9	99	1	99	等腰三角形
10	99	2	99	等腰三角形
11	99	99	1	等腰三角形
12	99	99	2	等腰三角形
13	1	1	1	等边三角形
14	2	2	2	等边三角形
15	100	100	100	等边三角形
16	99	99	99	等边三角形
17	50	50	99	等腰三角形
18	50	99	50	等腰三角形
19	99	50	50	等腰三角形
20	50	50	100	非三角形
21	50	100	50	非三角形
22	100	50	50	非三角形



因果图方法
一、 定义
因果图法是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，因果图法用于描述被测对象输入与输入，输入与输出质检的约束关系。它适合于检查程序输入条件的各种组合情况。

二、因果图法的思考
等价类划分法和边界值分析方法都是着重考虑输入条件，但没有考虑输入条件的各种组合、输入条件之间的相互制约关系。这样虽然各种输入条件可能出错的情况已经测试到了，但多个输入条件组合起来可能出错的情况却被忽视了。
如果在测试时必须考虑输入条件的各种组合，则可能的组合数目将是天文数字，因此必须考虑采用一种适合于描述多种条件的组合、相应产生多个动作的形式来进行测试用例的设计，这就需要利用因果图。


三、输入与输出之间的关系
    输入与输出的关系主要有恒等，与，或，非。
   恒等
    若输入条件发生，则一定会产生输出结果。若输入条件不发生，则一定不会产生结果。
    非
   与恒等恰恰相反，若输入条件发生，则一定不会产生输出结果。若输入条件不发生，则一定会产生结果。
    与
   在输入多个条件中，只有所有输出项发生时，才会产生对应输出。
    或
    在输入多个条件中，只要有一个发生，则会产生对应输出。

四、输入与输入之间的关系
    输入与输入之间存在着异，或，唯一，要求，四种关系。
    异
    所有输入条件中至多一个输入条件发生，可以一个条件都不发生。
    或
    所有输入条件中至少有一个输入条件发生，可以多个条件都发生。
    唯一
    所有输入中有且只有一个输入条件发生
    要求
    所有输入条件中只要有一个输入条件发生，则其他输入也会发生。

五、 实例
网签号格式进行验证，必须符合Y+7位数字的格式，如Y2018123。如果符合格式，则验证成功，如果第一列不是Y，则提示网签号格式错误。如果后7位非数字，则提示无此网签号。

输入：第一列是Y，后面是7位数字。
输出：验证成功，网签号非法，无此网签号。

C1：第一列是Y。
C2：其他7位是数字。
E1：网签号格式错误。
E2:无此网签号。
E：验证成功。

因果图：
测试判定表：
 	 	                1	2	3	4
输入	第一列是Y	    0	0	1	1
	    7位数字	        0	1	0	1
输出	成功验证	        F	F	F	T
	    网签号格式错误	T	T	F	F
	    无此网签号	    T	F	T	F


成功验证：E=and（C1,C2）
网签号格式错误：E1=not（C1）
无此网签号：E2=not（C2）


场景图法
一、定义
通过运用场景来对系统的功能点或业务流程的描述，从而提高测试效果的一种方法。用例场景来测试需求是指模拟特定场景边界发生的事情，通过事件来触发某个动作的发生，观察事件的最终结果，从而用来发现需求中存在的问题。

二、场景法的思考
现在的软件几乎都是用事件触发来控制流程的，事件触发时的情景便形成了场景，而同一事件不同的触发顺序和处理结果就形成事件流。这种在软件设计方面的思想也可以引入到软件测试中，可以比较生动地描绘出事件触发时的情景，有利于测试设计者设计测试用例，同时使测试用例更容易理解和执行。
场景法一般包括基本流和备选流。从一个流程开始，图中经过用例的每条路径都可以用基本流和备选流来表示。直黑线表示基本流，是经过用例的最简单的路径。从一个流程开始，通过描述经过的路径来确定的过程，经过遍历所有的基本流和备用流来完成整个场景。

三、设计步骤
1. 根据说明，描述出程序的基本流及各项备选流
2. 根据基本流和各项备选流生成不同的场景
3. 对每一个场景生成相应的测试用例
4. 对生成的所有测试用例重新复审，去掉多余的测试用例，测试用例确定后，对每一个测试用例确定测试数据值。

四、实例
有一个在线购物的实例，用户进入一个在线购物网站进行购物，选购物品后，进行在线购买，这时需要使用帐号登录，登录成功后，进行付钱交易，交易成功后，生成订购单，完成整个购物过程。

确定基本流和备选流。
基本流	登录网站，选择物品，登录账号，支付，生成订购单
备选流1	账号不存在
备选流2	账号或密码错误
备选流3	账号余额不足
备选流4	用户退出系统


测试用例	场景/条件	            账号	密码	用户余额	预期结果
1	    场景1：成功购物	        V	    V	    V	    成功购物
2	    场景2：账号不存在	        I	    N/A	    N/A	    提示账号不存在
3	    场景3：账号正确，密码错误	V	    I	    N/A	    提示账号或密码错误
4	    场景4：账号错误，密码正确	V	    I	    N/A	    提示账号或密码错误
5	    场景5：用户账号余额不足	V	    V	    I	    提示余额不足


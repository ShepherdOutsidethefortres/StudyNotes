1.本地仓库和远程仓库建立关联
（1）本地仓库操作
git add -A
git commit -m "xxx" -a
（2）github创建仓库
（3）本地仓库添加github上的git仓库作为远程仓库，起名origin
git remote add origin https://github.com/ShepherdOutsidethefortres/JavaBase.git
（4）问题：refusing to merge unrelated histories
解决：git pull origin master --allow-unrelated-histories
合并两个独立启动仓库的历史
（5）往远程仓库推
git push <远程主机名> <本地分支名>:<远程分支名>
git push orgin masteer:master
2.git pull
它是git fetch 和git merge的组合体
3.查看git提交日志
git log
4.回滚git代码
git reset --hard 版本id
5.//切换分支
  git checkout master
  //放弃本地所有更改
  git checkout .
  //查看本地分支
  git branch
  //查看所有分支
  git branch -a
  //git提交代码
  git commit  -m  "提交信息"
  //git比对某一次提交
   git diff commitId filepath 与某一次提交进行比较
  //git拉取最新分支
  git fetch -p
  //git clone保存密码
  git clone http://zhaohuiwei_iwaimai.baidu.com_waimai:123Asd#@xiaolvyun.baidu.com/git/waimai/wl_logistics/elerider
  更新单个文件
  git fetch
  例如：de89c13..c22a62d  elezhongbao_1-10-94_BRANCH -> origin/elezhongbao_1-10-94_BRANCH
  git checkout -m 版本号 文件
  例如：git checkout -m c22a62d 文件
  //回退到冲突前
  git reset --merge
  //提交时转换为LF，检出时转换为CRLF.Git 可以在你提交时自动地把回车（CR）和换行（LF）转换成换行（LF）

  git config --global core.autocrlf true
  //提交本地分支到远程仓库

Git fetch:只是从远程获取最新版本到本地,不会merge(合并)
Git pull:从远程获取最新版本并merge(合并)到本地
导致报错:error: You have not concluded your merge (MERGE_HEAD exists).的原因可能是在以前pull下来的代码自动合并失败
解决办法一:保留本地的更改,中止合并->重新合并->重新拉取
$:git merge --abort
$:git reset --merge
$:git pull
解决办法二:舍弃本地代码,远端版本覆盖本地版本(慎重)
$:git fetch --all
$:git reset --hard origin/master
$:git fetch

git clean -d -fx
即可。可能很多人都不明白-d，-fx到底是啥意思，其实git clean -d -fx表示：删除 一些 没有 git add 的 文件；
    git clean 参数
    -n 显示将要删除的文件和目录；
    -x -----删除忽略文件已经对git来说不识别的文件
    -d -----删除未被添加到git的路径中的文件
    -f -----强制运行
    git clean -n
    git clean -df
    git clean -f

#建立本地分支
git checkout -b trade
#在远程仓库建立同样的分支
git push origin trade
#本地仓库与远程仓库关联
git branch --set-upstream-to=origin/<branch> trade

有时在开发的feature中，整个分支的功能并没有完成开发完成，但是，有几个修改的基础文件需要合并到develop中，这个时候的操作步骤为：
git checkout develop     //切换到Develop分支
git checkout feature/new1.1 -- usercontroller.php  //将feature/new1.1中的usercontroller.php合并到develop分支中
git commit usercontroller.php -m 'xxx'    //提交文件

git branch -d [branchName]  #删除本地分支
git push origin --delete [branchname] #删除远程分支
git reset --hard origin/[branchname] #本地代码与某个分支代码对齐
git push -f 覆盖远程分支
